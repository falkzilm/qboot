name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  checks: write
  pull-requests: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Suite
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Run Tests
        run: ./mvnw test

      - name: Generate Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Maven Tests
          path: target/surefire-reports/*.xml
          reporter: java-junit

  build-jvm:
    runs-on: ubuntu-latest
    needs: test
    name: Build JVM
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build JVM Package
        run: ./mvnw package -DskipTests

      - name: Upload JVM Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qboot-jvm
          path: target/quarkus-app/
          retention-days: 30

  build-native:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: qboot-linux
            build_cmd: ./mvnw package -Dnative -DskipTests -Dquarkus.native.container-build=true -Dquarkus.native.libc=musl
          - os: macos-latest
            platform: macos
            artifact_name: qboot-macos
            build_cmd: ./mvnw package -Dnative -DskipTests -Dquarkus.native.container-build=false
          - os: windows-latest
            platform: windows
            artifact_name: qboot-windows.exe
            build_cmd: ./mvnw.cmd package --% -Dnative -DskipTests -Dquarkus.native.container-build=false

    runs-on: ${{ matrix.os }}
    needs: test
    name: Build Native - ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup GraalVM (Linux/macOS)
        if: matrix.os != 'windows-latest'
        uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '21'
          components: 'native-image'
          cache: 'maven'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup GraalVM (Windows)
        if: matrix.os == 'windows-latest'
        uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '21'
          components: 'native-image'
          cache: 'maven'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Configure Windows Environment
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build Native Executable
        run: ${{ matrix.build_cmd }}
        env:
          GRAALVM_HOME: ${{ env.JAVA_HOME }}

      - name: Rename Linux Executable
        if: matrix.os == 'ubuntu-latest'
        run: |
          mv target/*-runner target/${{ matrix.artifact_name }}
          chmod +x target/${{ matrix.artifact_name }}

      - name: Rename macOS Executable
        if: matrix.os == 'macos-latest'
        run: |
          mv target/*-runner target/${{ matrix.artifact_name }}
          chmod +x target/${{ matrix.artifact_name }}

      - name: Rename Windows Executable
        if: matrix.os == 'windows-latest'
        run: |
          move target\*-runner.exe target\${{ matrix.artifact_name }}

      - name: Test Native Executable (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          ./target/${{ matrix.artifact_name }} --version
          ./target/${{ matrix.artifact_name }} --list

      - name: Test Native Executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          target\${{ matrix.artifact_name }} --version
          target\${{ matrix.artifact_name }} --list

      - name: Upload Native Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: target/${{ matrix.artifact_name }}
          retention-days: 30

  release:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [build-jvm, build-native]
    name: Release Assets
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure
        run: ls -la ./artifacts

      - name: Upload Linux Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/qboot-linux/qboot-linux
          asset_name: qboot-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/qboot-macos/qboot-macos
          asset_name: qboot-macos
          asset_content_type: application/octet-stream

      - name: Upload Windows Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/qboot-windows.exe/qboot-windows.exe
          asset_name: qboot-windows.exe
          asset_content_type: application/octet-stream

      - name: Create JVM Distribution
        run: |
          cd ./artifacts/qboot-jvm
          zip -r ../qboot-jvm.zip .

      - name: Upload JVM Distribution to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/qboot-jvm.zip
          asset_name: qboot-jvm.zip
          asset_content_type: application/zip